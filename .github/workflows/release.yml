name: Release

on:
    push:
        branches:
            - main
        paths:
            - "force-app/**"
    workflow_dispatch:
        inputs:
            promote-package:
                description: Promote New Package Versions?
                required: false
                default: true
                type: boolean
            version:
                description: Version Number (#.#.#)
                required: false
                type: string

concurrency:
    # Queue releases to prevent version collisions - don't cancel, let them run sequentially
    group: release-${{ github.repository }}
    cancel-in-progress: false

jobs:
    release:
        name: Create Package Version and Release
        permissions:
            contents: write
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 2

            - name: Did sfdx-project.json Change?
              if: ${{ github.event_name == 'push' }}
              id: check-changes
              run: |
                  # Check if sfdx-project.json was modified in the latest commit
                  if git diff --name-only HEAD~1 HEAD | grep -q "^sfdx-project.json$"; then
                    echo "sfdx-project.json was modified"
                    echo "changed=true" >> "$GITHUB_OUTPUT"
                  else
                    echo "sfdx-project.json was not modified"
                    echo "changed=false" >> "$GITHUB_OUTPUT"
                  fi

            - name: Determine Version
              id: determine-version
              run: |
                  # Get current version from sfdx-project.json:
                  CURRENT_VERSION=$(jq -r '.packageDirectories[] | select(.default == true) | .versionNumber' sfdx-project.json | sed 's/\.NEXT$//')
                  echo "Current version: $CURRENT_VERSION"
                  if [[ "${{ github.event_name }}" == "push" && "${{ steps.check-changes.outputs.changed }}" == "false" ]]; then
                    # 1. On push AND sfdx-project.json was NOT updated - increment the patch version
                    IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
                    MAJOR=${VERSION_PARTS[0]}
                    MINOR=${VERSION_PARTS[1]}
                    PATCH=${VERSION_PARTS[2]}
                    NEW_PATCH=$((PATCH + 1))
                    NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
                    echo "Auto-incremented version to: $NEW_VERSION"
                  elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.version }}" ]]; then
                    # 2. On workflow dispatch & a version input is provided - use the version input
                    NEW_VERSION="${{ inputs.version }}"
                    echo "Using input version: $NEW_VERSION"
                  else
                    # 3. Else - use the existing version number
                    NEW_VERSION="$CURRENT_VERSION"
                    echo "Using current version: $NEW_VERSION"
                  fi
                  echo "version-number=$NEW_VERSION" >> "$GITHUB_OUTPUT"

            - name: Validate Package Version
              env:
                  VERSION: ${{ steps.determine-version.outputs.version-number }}
              run: |
                  if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "ERROR: Version '$VERSION' is not valid semver format. Expected 'MAJOR.MINOR.PATCH'"
                    exit 1
                  fi

            - name: Setup Node
              uses: actions/setup-node@v4
              with:
                  node-version: lts/*
                  cache: "npm"

            - name: Setup NPM
              shell: bash
              run: npm ci

            - name: Setup SF CLI
              uses: ./.github/actions/setup-sf-cli

            - name: Authenticate Devhub
              env:
                  CLIENT_ID: ${{ secrets.SALESFORCE_CONSUMER_KEY }}
                  JWT_KEY: ${{ secrets.SALESFORCE_JWT_KEY }}
                  USERNAME: ${{ secrets.SALESFORCE_DEVHUB_USERNAME }}
              shell: bash
              run: |
                  set -euo pipefail
                  echo "${JWT_KEY}" > server.key
                  sf org login jwt \
                    --client-id "$CLIENT_ID" \
                    --jwt-key-file server.key \
                    --set-default-dev-hub \
                    --username "$USERNAME"
                  trap 'rm -f server.key' EXIT

            - name: Get Version Number
              id: get-version
              env:
                  INPUT_VERSION: ${{ steps.determine-version.outputs.version-number }}
              shell: bash
              run: |
                  VERSION_NUMBER="${INPUT_VERSION}.NEXT"
                  VERSION_NAME="v${INPUT_VERSION}"
                  echo "Using version number: $VERSION_NUMBER"
                  echo "version-number=$VERSION_NUMBER" >> "$GITHUB_OUTPUT"
                  echo "version-name=$VERSION_NAME" >> "$GITHUB_OUTPUT"

            - name: Update Package Version
              shell: bash
              env:
                  VERSION_NUMBER: ${{ steps.get-version.outputs.version-number }}
                  VERSION_NAME: ${{ steps.get-version.outputs.version-name }}
              run: |
                  jq --arg vn "$VERSION_NUMBER" --arg vnm "$VERSION_NAME" \
                    '(.packageDirectories[] | select(.default == true)) |= (.versionNumber = $vn | .versionName = $vnm)' \
                    sfdx-project.json > sfdx-project.json.tmp && mv sfdx-project.json.tmp sfdx-project.json

            - name: Create New Package Version
              id: create-package
              env:
                  VERSION_NUMBER: ${{ steps.get-version.outputs.version-number }}
                  WIKI_URL: "https://github.com/jasonsiders/apex-async-actions/wiki"
              shell: bash
              run: |
                  set -euo pipefail
                  PACKAGE_ALIAS=$(jq -r '.packageDirectories[] | select(.default == true) | .package' sfdx-project.json)
                  COMMAND="sf package version create --code-coverage --installation-key-bypass --json --package \"$PACKAGE_ALIAS\" --post-install-url \"$WIKI_URL\" --wait 29"
                  echo "$COMMAND"
                  if RESULT=$(eval "$COMMAND" 2>&1); then
                    # Success - extract version ID
                    VERSION_ID=$(echo "$RESULT" | jq -r '.result.SubscriberPackageVersionId')
                    echo "Package Version ID: $VERSION_ID"
                    echo "version-id=$VERSION_ID" >> "$GITHUB_OUTPUT"
                    [[ -n "$VERSION_ID" && "$VERSION_ID" != "null" ]] || { echo "ERROR: Invalid version ID"; exit 1; }
                  else
                    echo "::error::Package creation failed: $RESULT"
                    exit 1
                  fi

            - name: Promote Package Version
              if: ${{ inputs.promote-package == true }}
              env:
                  VERSION_ID: ${{ steps.create-package.outputs.version-id }}
                  VERSION_NAME: ${{ steps.get-version.outputs.version-name }}
              shell: bash
              run: |
                  set -euo pipefail
                  sf package version promote --package "$VERSION_ID" --no-prompt
                  echo "Promoted package $VERSION_NAME - $VERSION_ID"

            - name: Run Prettier
              shell: bash
              run: |
                  npx prettier -w sfdx-project.json

            - name: Pull Latest Changes
              shell: bash
              run: |
                  git fetch origin main
                  git rebase origin/main || {
                    echo "Rebase failed, trying merge strategy"
                    git rebase --abort 2>/dev/null || true
                    git pull --no-rebase origin main
                  }

            - name: Tag & Commit Changes
              uses: "stefanzweifel/git-auto-commit-action@v6"
              with:
                  commit_message: "Packaged new version ${{ steps.get-version.outputs.version-name }}"
                  skip_dirty_check: true

            - name: Create Release
              if: ${{ success() && steps.create-package.outputs.version-id != '' }}
              id: create_release
              uses: softprops/action-gh-release@v2.3.2
              with:
                  body: |
                      ## Installation

                      ### Unlocked Package
                      **Package Version**: `${{ steps.create-package.outputs.version-id }}`
                      ```bash
                      sf package install --package ${{ steps.create-package.outputs.version-id }} --wait 20
                      ```
                  generate_release_notes: true
                  make_latest: true
                  tag_name: ${{ steps.get-version.outputs.version-name }}
                  token: ${{ secrets.GITHUB_TOKEN }}
